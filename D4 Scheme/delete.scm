(define (make-bst val ls rs) (list val ls rs))
(define (get-bst-val bst) (car bst))
(define (get-bst-ls bst) (cadr bst))
(define (get-bst-rs bst) (caddr bst))
;delete procedure has been written by assuming that x is present in bst
(define (delete x bst)
  (cond ((null? bst) '())
        ((= x (get-bst-val bst)) 
         (delete-root x bst))
       ((< x (get-bst-val bst))
	(make-bst (get-bst-val bst)
        	  (delete x (get-bst-ls bst))
		  (get-bst-rs bst)))
       ((> x (get-bst-val bst))
	(make-bst (get-bst-val bst)
		  (get-bst-ls bst)
       		  (delete x (get-bst-rs bst))))))


(define (delete-root x bst)
  (cond ((leaf? bst) '())
        ((null? (get-bst-ls bst)) (get-bst-rs bst))
        ((null? (get-bst-rs bst)) (get-bst-ls bst))
        (else (make-bst (get-bst-val (get-left-most-child (get-bst-rs bst)))
                        (get-bst-ls bst)
                        (delete (get-bst-val (get-left-most-child (get-bst-rs bst)))
                                (get-bst-rs bst))))))
(define (leaf? bst)
   (cond ((and (null? (get-bst-ls bst)) (null? (get-bst-rs bst))) #t)
         (else #f)))

(define (get-left-most-child bst)
   (cond ((null? (get-bst-ls bst)) (make-bst (get-bst-val bst) '() ()))
         (else (get-left-most-child (get-bst-ls bst)))))

